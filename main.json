{"meta":{"generator":"0.10.0","format":20,"date":1629325138982},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<h2 align=\"center\">Discord.js Sharder</h2>\n\n<p align=\"center\">\n<a href=\"https://patreon.com/yeen\"><img alt=\"Patreon\" src=\"https://img.shields.io/badge/patreon-donate?color=F77F6F&labelColor=F96854&logo=patreon&logoColor=ffffff\"></a>\n<a href=\"https://discord.gg/eazpsZNrRk\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/368557500884189186?color=7389D8&labelColor=6A7EC2&logo=discord&logoColor=ffffff\"></a>\n<img href=\"https://www.travis-ci.com/github/MrGriefs/discordjs-sharder\" alt=\"Travis (.com)\" src=\"https://img.shields.io/travis/MrGriefs/discordjs-sharder\">\n<img href=\"https://www.npmjs.com/package/discord.js-cluster\" alt=\"David\" src=\"https://img.shields.io/david/MrGriefs/discord.js-cluster\">\n<img href=\"https://www.npmjs.com/package/discord.js-cluster\" alt=\"node-current\" src=\"https://img.shields.io/node/v/discord.js-cluster\">\n<img href=\"https://www.npmjs.com/package/discord.js-cluster\" alt=\"GitHub package.json version\" src=\"https://img.shields.io/github/package-json/v/MrGriefs/discord.js-cluster\">\n<a href=\"https://npm.runkit.com/discord.js-cluster\"><img alt=\"RunKit\" src=\"https://img.shields.io/badge/Run-Kit-red\"></a>\n</p>\n\n## Table of Contents\n\n- [About](#about)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Documentation](#documentation)\n\n## About\n\ndiscord.js-cluster is a powerful cluster manager for the [Discord.js](https://discord.js.org/) library which implements [multiprocessing](https://en.wikipedia.org/wiki/Multicore_programming) to increase the performance of your client, heavily inspired by the Discord.js built-in [ShardingManager](https://discord.js.org/#/docs/main/stable/class/ShardingManager).  \nUsing the Node.js [cluster](https://nodejs.org/api/cluster.html) module, Discord.js Cluster spreads all [ShardingManager](https://discord.js.org/#/docs/main/stable/class/ShardingManager)s evenly among cores, and is easy to implement!\n\n## Installation\n\nWith npm:  \n\n```bash\n$ npm install discord.js-cluster\n```\n\nWith yarn:  \n\n```bash\n$ yarn add discord.js-cluster\n```\n\n## Usage\n\nCan be used exactly like the [ShardingManager](https://discord.js.org/#/docs/main/stable/class/ShardingManager)  \n`index.js:`\n\n```javascript\nconst { ClusterManager } = require('discord.js-cluster');\n\nconst manager = new ClusterManager('./bot.js', { token: 'your-token-goes-here' });\n\nmanager.on('clusterCreate', cluster => console.log(`Launched cluster ${cluster.id}`));\n\nmanager.spawn();\n```\n\n`bot.js:`\n\n```javascript\nconst { Client } = require('discord.js-cluster');\nconst { Intents } = require('discord.js');\n\nconst client = new Client({ intents: [Intents.FLAGS.GUILDS] });\n\nclient.on('ready', () => console.log(`Cluster ${client.cluster.id} is ready!`));\n\nclient.login(); // no token is required here!\n```\n\n## <a id=\"documentation\"></a> [Documentation](https://mrgriefs.github.io/discord.js-cluster)\n\nYou can find more documentation on the [website](https://mrgriefs.github.io/discord.js-cluster).\n","path":"README.md"}}}},"classes":[{"name":"Cluster","description":"A self-contained shard created by the {@link ClusterManager}. Each one has a {@link ChildProcess} that contains\nan instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\nspawn a new one to replace it as necessary.","extends":[[["EventEmitter"]]],"construct":{"name":"Cluster","params":[{"name":"manager","description":"Manager that is creating this cluster","type":[[["ClusterManager"]]]},{"name":"id","description":"The cluster's id","type":[[["number"]]]},{"name":"shards","description":"The list of shards to spawn","type":[[["Array","<"],["number",">"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ClusterManager"]]],"meta":{"line":32,"file":"Cluster.js","path":"src/sharding"}},{"name":"id","description":"The cluster's id in the manager","type":[[["number"]]],"meta":{"line":38,"file":"Cluster.js","path":"src/sharding"}},{"name":"args","description":"Arguments for the cluster's process (only when {@link ClusterManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":44,"file":"Cluster.js","path":"src/sharding"}},{"name":"execArgv","description":"Arguments for the shard's process executable (only when {@link ClusterManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":50,"file":"Cluster.js","path":"src/sharding"}},{"name":"shards","description":"The shards this cluster managers","type":[[["Array","<"],["number",">"]]],"meta":{"line":56,"file":"Cluster.js","path":"src/sharding"}},{"name":"env","description":"Environment variables for the cluster's process, or workerData for the cluster's worker","type":[[["Object"]]],"meta":{"line":62,"file":"Cluster.js","path":"src/sharding"}},{"name":"ready","description":"Whether the cluster's {@link Client} is ready","type":[[["boolean"]]],"meta":{"line":75,"file":"Cluster.js","path":"src/sharding"}},{"name":"process","description":"Process of the cluster (if {@link ClusterManager#mode} is `process`)","nullable":true,"type":[[["ChildProcess"]]],"meta":{"line":81,"file":"Cluster.js","path":"src/sharding"}},{"name":"worker","description":"Worker of the cluster (if {@link ClusterManager#mode} is `worker`)","nullable":true,"type":[[["Worker"]]],"meta":{"line":87,"file":"Cluster.js","path":"src/sharding"}},{"name":"_evals","description":"Ongoing promises for calls to {@link Cluster#eval}, mapped by the `script` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":94,"file":"Cluster.js","path":"src/sharding"}},{"name":"_fetches","description":"Ongoing promises for calls to {@link Cluster#fetchClientValue}, mapped by the `prop` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":101,"file":"Cluster.js","path":"src/sharding"}},{"name":"_exitListener","description":"Listener function for the {@link ChildProcess}' `exit` event","access":"private","type":[[["function"]]],"meta":{"line":108,"file":"Cluster.js","path":"src/sharding"}}],"methods":[{"name":"spawn","description":"Forks a child process or creates a worker thread for the cluster.\n<warn>You should not need to call this manually.</warn>","params":[{"name":"timeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving (`-1` or `Infinity` for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":118,"file":"Cluster.js","path":"src/sharding"}},{"name":"kill","description":"Immediately kills the cluster's process/worker and does not restart it.","meta":{"line":185,"file":"Cluster.js","path":"src/sharding"}},{"name":"respawn","description":"Kills and restarts the cluster's process/worker.","params":[{"name":"options","description":"Options for respawning the cluster","optional":true,"type":[[["ClusterRespawnOptions"]]]}],"async":true,"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":207,"file":"Cluster.js","path":"src/sharding"}},{"name":"send","description":"Sends a message to the cluster's process/worker.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise","<"],["Cluster",">"]]],"meta":{"line":218,"file":"Cluster.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a client property value of the cluster.","examples":["cluster.fetchClientValue('guilds.cache.size')\n  .then(count => console.log(`${count} guilds in cluster ${cluster.id}`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"meta":{"line":237,"file":"Cluster.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script or function on the cluster, in the context of the {@link Client}.","params":[{"name":"script","description":"JavaScript to run on the cluster","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":271,"file":"Cluster.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles a message received from the child process/worker.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":307,"file":"Cluster.js","path":"src/sharding"}},{"name":"_handleExit","description":"Handles the shard's process/worker exiting.","access":"private","params":[{"name":"respawn","description":"Whether to spawn the shard again","optional":true,"default":"this.manager.respawn","type":[[["boolean"]]]}],"meta":{"line":385,"file":"Cluster.js","path":"src/sharding"}}],"events":[{"name":"spawn","description":"Emitted upon the creation of the cluster's child process/worker.","params":[{"name":"process","description":"Child process/worker that was created","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":139,"file":"Cluster.js","path":"src/sharding"}},{"name":"ready","description":"Emitted upon the cluster's {@link Client#ready} event.","meta":{"line":312,"file":"Cluster.js","path":"src/sharding"}},{"name":"disconnect","description":"Emitted upon the cluster's {@link Client#disconnect} event.","meta":{"line":323,"file":"Cluster.js","path":"src/sharding"}},{"name":"reconnecting","description":"Emitted upon the cluster's {@link Client#reconnecting} event.","meta":{"line":334,"file":"Cluster.js","path":"src/sharding"}},{"name":"message","description":"Emitted upon receiving a message from the child process/worker.","params":[{"name":"message","description":"Message that was received","type":[["*"]]}],"meta":{"line":372,"file":"Cluster.js","path":"src/sharding"}},{"name":"death","description":"Emitted upon the shard's child process/worker exiting.","params":[{"name":"process","description":"Child process/worker that exited","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":386,"file":"Cluster.js","path":"src/sharding"}}],"meta":{"line":16,"file":"Cluster.js","path":"src/sharding"}},{"name":"ClusterClientUtil","description":"Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.\nUtilises IPC to send and receive data to/from the master process and other shards.","construct":{"name":"ClusterClientUtil","params":[{"name":"client","description":"Client of the current shard","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ClusterManagerMode"]]]}]},"props":[{"name":"client","description":"Client for the shard","type":[[["Client"]]],"meta":{"line":23,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ClusterManagerMode"]]],"meta":{"line":29,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"id","description":"The cluster id of this client","readonly":true,"type":[[["number"]]],"meta":{"line":48,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of clusters","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"shard","description":"Shard helpers for the client (only if the process was spawned from a {@link ClusterManager})","readonly":true,"type":[[["ShardClientUtil"]]],"meta":{"line":66,"file":"ClusterClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process.","emits":["Shard#event:message"],"params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":76,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each cluster, or a given cluster.","see":["{@link ClusterManager#fetchClientValues}"],"examples":["client.cluster.fetchClientValues('guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]},{"name":"cluster","description":"Cluster to fetch property from, all if undefined","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<("],["*","|"],["Array","<"],["*",">)>"]]],"meta":{"line":96,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script or function on all clusters, or a given cluster, in the context of the {@link Client}s.","see":["{@link ClusterManager#broadcastEval}"],"examples":["client.cluster.broadcastEval(client => client.guilds.cache.size)\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"script","description":"JavaScript to run on each cluster","type":[[["function"]]]},{"name":"options","description":"The options for the broadcast","optional":true,"default":"{}","type":[[["BroadcastEvalOptions"]]]}],"returns":{"types":[[["Promise","<("],["*","|"],["Array","<"],["*",">)>"]]],"description":"Results of the script execution"},"meta":{"line":124,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"respawnAll","description":"Requests a respawn of all shards.","see":["{@link ClusterManager#respawnAll}"],"params":[{"name":"options","description":"Options for respawning shards","optional":true,"type":[[["MultipleShardRespawnOptions"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the message being sent"},"meta":{"line":153,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"async":true,"meta":{"line":162,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure.","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":184,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class.","scope":"static","params":[{"name":"client","description":"The client to use","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ClusterManagerMode"]]]}],"returns":[[["ClusterClientUtil"]]],"meta":{"line":203,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"clusterIdForGuildId","description":"Get the cluster id for a given guild id.","scope":"static","params":[{"name":"guildId","description":"Snowflake guild id to get cluster id for","type":[[["Snowflake"]]]},{"name":"clusterCount","description":"Number of clusters","type":[[["number"]]]},{"name":"shardCount","description":"Number of shards","type":[[["number"]]]}],"returns":[[["number"]]],"meta":{"line":222,"file":"ClusterClientUtil.js","path":"src/sharding"}}],"meta":{"line":13,"file":"ClusterClientUtil.js","path":"src/sharding"}},{"name":"ClusterManager","description":"This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\nIt works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each\ncontaining its own instance of your bot's {@link Client}. They all have a line of communication with the master\nprocess, and there are several useful methods that utilise it in order to simplify tasks that are normally difficult\nwith sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a\npath to your main bot script to launch for each one.","extends":[[["EventEmitter"]]],"construct":{"name":"ClusterManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["ShardingManagerOptions"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":85,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"clusterList","description":"List of clusters this cluster manager spawns","type":[[["string"]],[["Array","<"],["number",">"]]],"meta":{"line":95,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"totalClusters","description":"Amount of clusters that all cluster managers spawn in total","type":[[["number"]]],"meta":{"line":116,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"shardList","description":"List of shards this sharding manager spawns","type":[[["string"]],[["Array","<"],["number",">"]]],"meta":{"line":131,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that all sharding managers spawn in total","type":[[["number"]]],"meta":{"line":151,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"guildsPerShard","description":"Amount of guilds each shard should spawn with","type":[[["number"]]],"meta":{"line":166,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"mode","description":"Mode for shards to spawn with","type":[[["ClusterManagerMode"]]],"meta":{"line":175,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"clusterRespawn","description":"Whether clusters should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":184,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"shardRespawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":190,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"clusterArgs","description":"An array of arguments to pass to clusters (only when {@link ClusterManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":196,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards (only when {@link ClusterManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":202,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"execArgv","description":"An array of arguments to pass to the executable (only when {@link ClusterManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":208,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to clusters","nullable":true,"type":[[["string"]]],"meta":{"line":214,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"clusters","description":"A collection of clusters that this manager has spawned","type":[[["Collection","<"],["number",", "],["Cluster",">"]]],"meta":{"line":220,"file":"ClusterManager.js","path":"src/sharding"}}],"methods":[{"name":"createCluster","description":"Creates a single shard.\n<warn>Using this method is usually not necessary if you use the spawn method.</warn>","params":[{"name":"id","description":"Id of the shard to create\n<info>This is usually not necessary to manually specify.</info>","optional":true,"default":"this.shards.size","type":[[["number"]]]},{"name":"shards","description":"List of shard ids to spawn in this cluster","type":[[["Array","<"],["number",">"]]]}],"returns":{"types":[[["Cluster"]]],"description":"Note that the created shard needs to be explicitly spawned using its spawn method."},"meta":{"line":235,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple clusters.","params":[{"name":"options","description":"Options for spawning shards","optional":true,"type":[[["MultipleClusterSpawnOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Cluster",">>"]]],"meta":{"line":261,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Sends a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise","<"],["Array","<"],["Shard",">>"]]],"meta":{"line":360,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, or a given shard, in the context of the {@link Client}s.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["function"]]]},{"name":"options","description":"The options for the broadcast","optional":true,"default":"{}","type":[[["BroadcastEvalOptions"]]]}],"returns":{"types":[[["Promise","<("],["*","|"],["Array","<"],["*",">)>"]]],"description":"Results of the script execution"},"meta":{"line":379,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard, or a given shard.","examples":["manager.fetchClientValues('guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]},{"name":"cluster","description":"Shard to fetch property from, all if undefined","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<("],["*","|"],["Array","<"],["*",">)>"]]],"meta":{"line":394,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"_performOnClusters","description":"Runs a method with given arguments on all shards, or a given shard.","access":"private","params":[{"name":"method","description":"Method name to run on each shard","type":[[["string"]]]},{"name":"args","description":"Arguments to pass through to the method call","type":[[["Array","<"],["*",">"]]]},{"name":"cluster","description":"Shard to run on, all if undefined","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<("],["*","|"],["Array","<"],["*",">)>"]]],"description":"Results of the method execution"},"meta":{"line":406,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"respawnAll","description":"Kills all running clusters and respawns them.","params":[{"name":"options","description":"Options for respawning clusters","optional":true,"type":[[["MultipleClusterRespawnOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Cluster",">>"]]],"meta":{"line":436,"file":"ClusterManager.js","path":"src/sharding"}}],"events":[{"name":"shardCreate","description":"Emitted upon creating a cluster.","params":[{"name":"cluster","description":"Cluster that was created","type":[[["Cluster"]]]}],"meta":{"line":238,"file":"ClusterManager.js","path":"src/sharding"}}],"meta":{"line":30,"file":"ClusterManager.js","path":"src/sharding"}}],"interfaces":[],"typedefs":[{"name":"ClusterRespawnOptions","description":"Options used to respawn a cluster.","type":[[["Object"]]],"props":[{"name":"delay","description":"How long to wait between killing the process/worker and\nrestarting it (in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"timeout","description":"The amount in milliseconds to wait until the {@link Client}\nhas become ready before resolving (`-1` or `Infinity` for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"meta":{"line":193,"file":"Cluster.js","path":"src/sharding"}},{"name":"ClusterManagerMode","description":"The mode to spawn shards with for a {@link ClusterManager}. Can be either one of:\n* 'process' to use child processes\n* 'worker' to use [Worker threads](https://nodejs.org/api/worker_threads.html)","type":[[["string"]]],"meta":{"line":31,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"ShardingManagerOptions","description":"The options to spawn shards with for a {@link ClusterManager}.","type":[[["Object"]]],"props":[{"name":"totalClusters","description":"Number of total clusters of all cluster managers or \"auto\"\n<warn>It is not recommended to spawn more clusters than CPUs.</warn>","optional":true,"default":"'auto'","type":[[["string"]],[["number"]]]},{"name":"totalShards","description":"Number of total shards of all cluster managers or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["number"]]]},{"name":"clusterList","description":"List of clusters to spawn or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["Array","<"],["number",">"]]]},{"name":"shardList","description":"List of shards to spawn or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["Array","<"],["number",">"]]]},{"name":"guildsPerShard","description":"Amount of guilds each shard should spawn with\n(only available when totalShards is set to 'auto')","optional":true,"default":1000,"type":[[["number"]]]},{"name":"mode","description":"Which mode to use for clusters\n<info>Multiprocessing is only available for workers</info>","optional":true,"default":"'worker'","type":[[["ClusterManagerMode"]]]},{"name":"clusterRespawn","description":"Whether clusters should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"shardRespawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"shardArgs","description":"Arguments to pass to the shard script when spawning\n(only available when mode is set to 'process')","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"execArgv","description":"Arguments to pass to the shard script executable when spawning\n(only available when mode is set to 'process')","optional":true,"default":"[]","type":[[["string"]]]},{"name":"token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}],"meta":{"line":38,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"MultipleClusterSpawnOptions","description":"Option used to spawn multiple clusters.","type":[[["Object"]]],"props":[{"name":"clusters","description":"Number of clusters to spawn","optional":true,"default":"this.totalClusters","type":[[["number"]],[["string"]]]},{"name":"shards","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]],[["string"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]},{"name":"timeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready","optional":true,"default":30000,"type":[[["number"]]]}],"meta":{"line":247,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"BroadcastEvalOptions","description":"Options for {@link ClusterManager#broadcastEval} and {@link ShardClientUtil#broadcastEval}.","type":[[["Object"]]],"props":[{"name":"cluster","description":"Shard to run script on, all if undefined","optional":true,"type":[[["number"]]]},{"name":"context","description":"The JSON-serializable values to call the script with","optional":true,"type":[["*"]]}],"meta":{"line":366,"file":"ClusterManager.js","path":"src/sharding"}},{"name":"MultipleClusterRespawnOptions","description":"Options used to respawn all shards.","type":[[["Object"]]],"props":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"delay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"timeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another (`-1` or `Infinity` for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"meta":{"line":421,"file":"ClusterManager.js","path":"src/sharding"}}],"externals":[]}